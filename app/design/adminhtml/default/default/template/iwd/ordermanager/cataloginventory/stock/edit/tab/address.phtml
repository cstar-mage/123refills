<?php
echo $this->getForm()->toHtml();
?>

<script type="text/javascript">
    //<![CDATA[

    var addressesModel = Class.create();
    addressesModel.prototype = {
        initialize: function () {
            this.loader = new varienLoader(true);
            this.regionsUrl = '<?php echo $this->getRegionsUrl() ?>';

            this.bindCountryRegionRelation();
        },

        syncFormData: function (evt) {
            var container = false;

            if (!evt.addClassName) {
                var elm = Event.element(evt);
            } else {
                var elm = evt;
            }

            elm = $(elm);
            while (elm.tagName.toUpperCase() != 'BODY') {
                if (elm.addressItem) {
                    container = elm;
                }
                elm = $(elm.parentNode);
            }

            if (container) {
                var data = {};
                var fields = this.getFormContainerFields(container);
                for (var i = 0; i < fields.size(); i++) {
                    if (fields[i].id) {
                        var id = fields[i].id.replace(/^(_item)?[0-9]+/, '');
                        var id = id.replace(/^(id)?[0-9]+/, '');
                        var value = fields[i].getValue();
                        var tagName = fields[i].tagName.toLowerCase();
                        if (tagName == 'select') {
                            if (fields[i].multiple) {
                                var values = $([]);
                                var l = fields[i].options.length;
                                for (j = 0; j < l; j++) {
                                    var o = fields[i].options[j];
                                    if (o.selected === true) {
                                        values[values.length] = o.text.escapeHTML();
                                    }
                                }
                                data[id] = values.join(', ');
                            } else {
                                data[id] = fields[i].options[fields[i].selectedIndex].text.escapeHTML();
                            }
                        } else if (value !== null) {
                            data[id] = value.escapeHTML();
                        }
                    }
                }

                // Set name of state to 'region' if list of states are in 'region_id' selectbox
                if (!data['region'] && data['region_id']) {
                    data['region'] = data['region_id'];
                    delete data['region_id'];
                }

                // Set data to html
                var itemContainer = container.addressItem.getElementsBySelector('address');
                if (itemContainer[0]) {
                    var html = this.itemContentTemplate.evaluate(data);
                    html = html.replace(new RegExp('(<br\\s*/?>\\s*){2,}', 'img'), '<br/>');
                    html = html.replace(new RegExp('<br\\s*/?>(\\s*,){1,}\\s*<br\\s*/?>', 'ig'), '<br/>');
                    html = html.replace(new RegExp('<br\\s*/?>(\\s*,){1,}(.*)<br\\s*/?>', 'ig'), '<br/>$2<br/>');
                    html = html.replace(new RegExp('<br\\s*/?>(.*?)(,\\s*){1,}<br\\s*/?>', 'ig'), '<br/>$1<br/>');
                    html = html.replace(new RegExp('<br\\s*/?>(.*?)(,\\s*){2,}(.*?)<br\\s*/?>', 'ig'), '<br/>$1, $3<br/>');
                    html = html.replace(new RegExp('t:\\s*<br\\s*/?>', 'ig'), '');
                    html = html.replace(new RegExp('f:\\s*<br\\s*/?>', 'ig'), '');
                    html = html.replace(new RegExp('vat:\\s*$', 'ig'), '');
                    itemContainer[0].innerHTML = html;
                }
            }
        },

        bindCountryRegionRelation: function (parentId) {

            var countryElements = $$('.countries');
            for (var i = 0; i <= countryElements.length; i++) {
                if (countryElements[i]) {
                    if (!countryElements[i].bindRegions || !countryElements[i].parentBindId || countryElements[i].parentBindId != parentId) {
                        //if(!countryElements[i].bindRegions || !countryElements[i].parentBindId){
                        Event.observe(countryElements[i], 'change', this.reloadRegionField.bind(this));

                        countryElements[i].bindRegions = true;
                        countryElements[i].parentBindId = parentId;
                    }
                }
            }
        },

        reloadRegionField: function (event) {
            var countryElement = Event.element(event);
            if (countryElement.id) {
                var regionElement = $(countryElement.id.replace(/country_id/, 'region'));
                if (regionElement) {
                    this.regionElement = regionElement;
                    this.countryEl = countryElement;
                    if (countryElement.value) {
                        var url = this.regionsUrl + 'parent/' + countryElement.value;
                        this.loader.load(url, {}, this.refreshRegionField.bind(this));
                    } else {
                        // Set empty text field in region
                        this.refreshRegionField('[]');
                    }
                }
                // set Zip optional/required
                varienGlobalEvents.fireEvent("address_country_changed", countryElement);
            }
        },

        refreshRegionField: function (serverResponse) {

            if (!serverResponse)
                return;
            var data = eval('(' + serverResponse + ')');

            var row = Element.previous(this.regionElement.parentNode, 0);
            var reqLabel = Element.select(row, '.required');

            // Set regions and refresh controls
            // We use a pair of 'region' and 'region_id' to properly submit data:
            // manually entered text goes in 'region' and selected option id goes in 'region_id'
            var regionHtmlName = this.regionElement.name;
            var regionIdHtmlName = regionHtmlName.replace(/region/, 'region_id');
            var regionHtmlId = this.regionElement.id;
            var regionIdHtmlId = regionHtmlId.replace(/region/, 'region_id');
            var newInputId = null; // id of imput that was added to a page - filled below
            var html = '';

            if (data.length) {
                // Create visible selectbox 'region_id' and hidden 'region'
                html = '<select name="' + regionIdHtmlName + '" id="' + regionIdHtmlId + '" class="select" title="' + this.regionElement.title + '">';

                for (var i in data) {
                    if (data[i].label) {
                        html += '<option value="' + data[i].value + '"';
                        if (this.regionElement.value && (this.regionElement.value == data[i].value || this.regionElement.value == data[i].label)) {
                            html += ' selected="selected"';
                        }
                        html += '>' + data[i].label + '</option>';
                    }
                }
                html += '</select>';

                html += '<input type="hidden" name="' + regionHtmlName + '" id="' + regionHtmlId + '"/>';

                if (reqLabel) {
                    reqLabel.each(function (item) {
                        Element.show(item)
                    });
                }

                newInputId = regionIdHtmlId;
            } else {
                // Create visible text input 'region' and hidden 'region_id'
                html = '<input type="text" name="' + regionHtmlName + '" id="' + regionHtmlId + '" class="input-text" title="' + this.regionElement.title + '" />'
                    + '<input type="hidden" name="' + regionIdHtmlName + '" id="' + regionIdHtmlId + '"/>';

                if (reqLabel) {
                    reqLabel.each(function (item) {
                        Element.hide(item)
                    });
                }

                newInputId = regionHtmlId;
            }

            var parentNode = this.regionElement.parentNode;
            parentNode.innerHTML = html;
            this.regionElement = $(regionHtmlId);

            // Updating in address info
            var newInput = $(newInputId);
            Event.observe(newInput, 'change', this.onItemFormFieldChange); // Restore observing to update address info
            this.syncFormData(newInput); // Update address info now
            var activeElementId = regionHtmlId;
            if (('select' == $(regionIdHtmlId).tagName.toLowerCase()) && regionIdHtmlId) {
                activeElementId = regionIdHtmlId;
            }

        }
    };

    customerAddresses = new addressesModel();
    //]]>
</script>
