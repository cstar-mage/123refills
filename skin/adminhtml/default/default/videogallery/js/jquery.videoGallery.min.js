(function (d) {
    function q(a, c) {
        function f() {
            if ("youtube_video_query" != b.dataFeature && "youtube_playlist_query" != b.dataFeature && "youtube_channel_query" != b.dataFeature) {
                if (b.isEmpty(b.ap_api_path_title_v.val())) return b.ap_api_path_title.addClass("ap_hap_error"), alert("Please fill missing fields!"), !1
            } else if (b.isEmpty(b.ap_api_query_v.val())) return b.ap_api_query_title.addClass("ap_hap_error"), alert("Please fill missing fields!"), !1;
            var a = {
                fromapi: !0
            };
            a.type = b.ap_api_youtube_feature_v.val();
            a.path = a.id = b.ap_api_path_title_v.val();
            a.sort = b.ap_api_youtube_sort_v.val();
            a.limit = parseInt(b.ap_api_limit_v.val(), 10);
            a.query = b.ap_api_query_v.val();
            b.useDeeplink && (a.deeplink = b.ap_api_youtube_feature_v.val());
            b._videoProcessDataUrl.push(a);
            return !0
        }

        function k() {
            var a, c, d, f, e, k = !1;
            b.thumbInnerContainer.unbind("touchstart.ap touchmove.ap touchend.ap click.ap-touchclick").bind("touchstart.ap", function (g) {
                if (!b._componentInited) return !1;
                if (!b.touchOn) return !0;
                g = g.originalEvent.touches[0];
                a = b.thumbInnerContainer.position().left;
                c = b.thumbInnerContainer.position().top;
                d = g.pageX;
                f = g.pageY;
                e = !1;
                k = !0
            }).bind("touchmove.ap", function (g) {
                if (k) {
                    g = g.originalEvent.touches[0];
                    var l;
                    "horizontal" == b._thumbOrientation ? (l = a - d + g.pageX, w = b._getComponentSize("w"), 0 < l && (l = 0), l < w - b._thumbInnerContainerSize - b._thumbForwardSize - b._thumbBackwardSize && (l = w - b._thumbInnerContainerSize - b._thumbForwardSize - b._thumbBackwardSize), b.thumbInnerContainer.css("left", l + "px")) : (l = c - f + g.pageY, h = b._getComponentSize("h"), 0 < l && (l = 0), l < h - b._thumbInnerContainerSize - b._thumbForwardSize - b._thumbBackwardSize && (l = h - b._thumbInnerContainerSize - b._thumbForwardSize - b._thumbBackwardSize), b.thumbInnerContainer.css("top", l + "px"));
                    e = e || 5 < Math.abs(d - g.pageX) || 5 < Math.abs(f - g.pageY);
                    return !1
                }
            }).bind("touchend.ap", function (b) {
                k = !1
            }).bind("click.ap-touchclick", function (b) {
                if (e) return e = !1
            })
        }

        function g() {
            b._playlistTransitionOn || (b.transitionFinishIntervalID && clearInterval(b.transitionFinishIntervalID), b.addressTimeoutID && clearTimeout(b.addressTimeoutID), b.onChange(b._externalChangeEvent))
        }

        function e() {
            b.addressTimeoutID && clearTimeout(b.addressTimeoutID);
            b.onChange(b._externalChangeEvent)
        }
        this._componentInited = !1;
        var b = this;
        this.baseURL = window.location.href;
        this.settings = d.extend({}, d.fn.videoGallery.defaults, c);
        this.isMobile = isMobile;
        this.prev_v = "/media/videogallery/data/icons/prev_v.png";
        this.prev = "/media/videogallery/data/icons/prev.png";
        this.prev_v_on = "/media/videogallery/data/icons/prev_v_on.png";
        this.prev_on = "/media/videogallery/data/icons/prev_on.png";
        this.next_v = "/media/videogallery/data/icons/next_v.png";
        this.next = "/media/videogallery/data/icons/next.png";
        this.next_v_on = "/media/videogallery/data/icons/next_v_on.png";
        this.next_on = "/media/videogallery/data/icons/next_on.png";
        this._switch = "/media/videogallery/data/icons/switch.png";
        this._switch_on = "/media/videogallery/data/icons/switch_on.png";
        this.ic_play = "/media/videogallery/data/icons/play.png";
        this.ic_play_on = "/media/videogallery/data/icons/play_on.png";
        this.ic_pause = "/media/videogallery/data/icons/pause.png";
        this.ic_pause_on = "/media/videogallery/data/icons/pause_on.png";
        this.ic_controls_prev = "/media/videogallery/data/icons/controls_prev.png";
        this.ic_controls_prev_on = "/media/videogallery/data/icons/controls_prev_on.png";
        this.ic_controls_next = "/media/videogallery/data/icons/controls_next.png";
        this.ic_controls_next_on = "/media/videogallery/data/icons/controls_next_on.png";
        this._body = d("body");
        this._window = d(window);
        this._doc = d(document);
        this._windowResizeInterval = 250;
        this._windowResizeIntervalID;
        this._mediaPath;
        this._mediaType;
        this.mediaPlaying = !1;
        this._vimeoPlayer;
        this._youtubeInited = this._youtubeChromeless = this._vimeoInited = !1;
        this._thumbInnerContainerSize;
        this._thumbScrollIntervalID;
        this._thumbArr = [];
        this._thumbHolderArr = [];
        this._videoProcessCounter = 0;
        this._videoProcessData = [];
        this._videoProcessDataUrl = [];
        this._playlistQueryCounter = 0;
        this._playlistQueryUrl = [];
        this._playlistLength;
        this._playlistTransitionOn = this._playlistOpened = !1;
        this._thumbsScrollValue = 200;
        this.playlistDataArr = [];
        this.scrollPane;
        this.scrollPaneApi;
        this.demoLimitAdd = 100;
        this.demoLimitGet = 10;
        this.vimeoTypeArr = "vimeo_videos.getAll vimeo_videos.getAppearsIn vimeo_videos.getLikes vimeo_videos.getUploaded vimeo_videos.search vimeo_groups.getVideos vimeo_channels.getVideos vimeo_albums.getVideos".split(" ");
        this.deeplinkCounter;
        this.vimeoPage;
        this.vimeoTotalPages;
        this.vimeoLimit;
        this.vimeoDataTaken;
        this.youtubeTypeArr = "youtube_playlist youtube_user_favourites youtube_user_uploads youtube_video_query youtube_related_video_query youtube_playlist_query youtube_user_playlists youtube_channel_query youtube_standard_feed".split(" ");
        this.youtubeEnlargeCounter = 50;
        this.youtubeLimit;
        this.youtubeType;
        this.fromApiAddresses = [];
        this.apiCreation;
        this.noPlaylistCreation;
        this.resultsDataArr = [];
        this.resultsBoxArr = [];
        this.ap_api_results_pane_api;
        this.ap_api_results_pane;
        this._autoInitActiveItem;
        this.reCheckAddressTimeoutID;
        this.reCheckAddressTimeout = 250;
        this.scrollType = this.settings.scrollType;
        this._componentFixedSize = this.settings.componentFixedSize;
        this.initialAutoplay = this.vim_autoPlay = this.yt_autoPlay = this.autoPlay = this.settings.autoPlay;
        this.isMobile && (this.vim_autoPlay = this.yt_autoPlay = this.autoPlay = !1);
        this._autoAdvanceToNextVideo = this.settings.autoAdvanceToNextVideo;
        this.randomPlay = this.settings.randomPlay;
        this.loopingOn = this.settings.loopingOn;
        this.defaultVolume = this.settings.defaultVolume;
        0 > this.defaultVolume ? this.defaultVolume = 0 : 1 < this.defaultVolume && (this.defaultVolume = 1);
        this._closePlaylistOnVideoSelect = this.settings.closePlaylistOnVideoSelect;
        this._autoOpenPlaylist = this.settings.autoOpenPlaylist;
        this._autoOpenPlaylistInit;
        this.useYoutubeHighestQuality = this.settings.useYoutubeHighestQuality;
        this.componentWrapper = d(a);
        this.mediaPreloader = this.componentWrapper.find(".mediaPreloader").css("display", "block");
        this.componentPlaylist = this.componentWrapper.find(".componentPlaylist");
        this.mediaWrapper = this.componentWrapper.find(".mediaWrapper");
        this.youtubeHolder = this.componentWrapper.find(".youtubeHolder");
        this.vimeoHolder = this.componentWrapper.find(".vimeoHolder");
        var l = this.settings.playlistPosition;
        "bottom" == l ? this._thumbOrientation = "horizontal" : "right" == l && (this._thumbOrientation = "vertical");
        this.thumbHolder = null;
        0 < this.componentWrapper.find(".thumbHolder").length && (this.thumbHolder = this.componentWrapper.find(".thumbHolder"));
        "buttons" == this.scrollType && !this.isMobile && this.thumbHolder && this.thumbHolder.bind("mousewheel", function (a, c, d, f) {
            if (!b._componentInited || b._playlistTransitionOn) return !1;
            a = 0 < c ? 1 : -1;
            if ("horizontal" == b._thumbOrientation) {
                if (b._thumbInnerContainerSize < b._getComponentSize("w") - b._thumbBackwardSize - b._thumbForwardSize) return;
                c = parseInt(b.thumbInnerContainer.css("left"), 10);
                c += b._thumbsScrollValue * a;
                0 < c ? c = 0 : c < b._getComponentSize("w") - b._thumbInnerContainerSize - b._thumbForwardSize - b._thumbBackwardSize && (c = b._getComponentSize("w") - b._thumbInnerContainerSize - b._thumbForwardSize - b._thumbBackwardSize);
                b.thumbInnerContainer.css("left", c + "px")
            } else {
                if (b._thumbInnerContainerSize < b._getComponentSize("h") - b._thumbBackwardSize - b._thumbForwardSize) return;
                c = parseInt(b.thumbInnerContainer.css("top"), 10);
                c += b._thumbsScrollValue * a;
                0 < c ? c = 0 : c < b._getComponentSize("h") - b._thumbInnerContainerSize - b._thumbForwardSize - b._thumbBackwardSize && (c = b._getComponentSize("h") - b._thumbInnerContainerSize - b._thumbForwardSize - b._thumbBackwardSize);
                b.thumbInnerContainer.css("top", c + "px")
            }
            return !1
        });
        this._upEvent = this._moveEvent = this._downEvent = "";
        this.hasTouch;
        this.touchOn = !0;
        "ontouchstart" in window ? (this.hasTouch = !0, this._downEvent = "touchstart.ap", this._moveEvent = "touchmove.ap", this._upEvent = "touchend.ap") : (this.hasTouch = !1, this._downEvent = "mousedown.ap", this._moveEvent = "mousemove.ap", this._upEvent = "mouseup.ap");
        this.thumbContainer = this.componentWrapper.find(".thumbContainer");
        "buttons" == this.scrollType && (this.thumbBackward = this.componentWrapper.find(".thumbBackward").css({
            cursor: "pointer",
            display: "none"
        }).bind(this._downEvent, function () {
            if (!b._componentInited || b._playlistTransitionOn) return !1;
            b._thumbScrollIntervalID && clearInterval(b._thumbScrollIntervalID);
            b._thumbScrollIntervalID = setInterval(function () {
                b._scrollThumbsBack()
            }, 100);
            return !1
        }).bind(this._upEvent, function () {
            b._thumbScrollIntervalID && clearInterval(b._thumbScrollIntervalID);
            return !1
        }), this.thumbForward = this.componentWrapper.find(".thumbForward").css({
            cursor: "pointer",
            display: "none"
        }).bind(this._downEvent, function () {
            if (!b._componentInited || b._playlistTransitionOn) return !1;
            b._thumbScrollIntervalID && clearInterval(b._thumbScrollIntervalID);
            b._thumbScrollIntervalID = setInterval(function () {
                b._scrollThumbsForward()
            }, 100);
            return !1
        }).bind(this._upEvent, function () {
            b._thumbScrollIntervalID && clearInterval(b._thumbScrollIntervalID);
            return !1
        }));
        this.thumbInnerContainer = this.componentWrapper.find(".thumbInnerContainer");
        this.playlistControls = this.componentWrapper.find(".playlistControls");
        this.playlistHitArea;
        this.thumbHolderSize;
        this._thumbBackwardSize;
        this._thumbForwardSize;
        this.ap_api_results = d("#ap_api_results");
        this.ap_api_results_inner = d("#ap_api_results_inner");
        this.ap_api_results_wrap = d("#ap_api_results_wrap");
        this.dataFeature;
        this.api_remove_all = d("#api_remove_all").find("img").bind("click", function () {
            if (!b._componentInited || b._playlistTransitionOn) return !1;
            d(b.resultsBoxArr).each(function () {
                d(this).remove()
            });
            b.resultsBoxArr = [];
            b.resultsDataArr = [];
            b.updateApiResScroll();
            return !1
        });
        this.ap_api_execute = d("#ap_api_execute");
        this.ap_api_get = d("#ap_api_get");
        this.ap_api_path = d("#ap_api_path");
        this.ap_api_path_title = d("#ap_api_path_title");
        this.ap_api_vimeo_feature = d("#ap_api_vimeo_feature");
        this.ap_api_path_title_v = d("#ap_api_path_title_v").focusin(function () {
            b.ap_api_path_title.removeClass("ap_hap_error")
        });
        this.ap_api_query_title = d("#ap_api_query_title");
        this.ap_api_query_v = d("#ap_api_query_v").focusin(function () {
            b.ap_api_query_title.removeClass("ap_hap_error")
        });
        this.ap_api_num_res = d("#ap_api_num_res");
        this.ap_api_path = d("#ap_api_path");
        this.ap_api_path_v = d("#ap_api_path_v");
        this.ap_api_feature_sort = d("#ap_api_feature_sort");
        this.ap_api_vimeo_sort_v = d("#ap_api_vimeo_sort_v");
        this.ap_api_limit_v = d("#ap_api_limit_v").on("keyup.ap", this.checkKey);
        this.ap_api_query = d("#ap_api_query");
        this.ap_api_append = d("#ap_api_append");
        this.ap_api_youtube_feature = d("#ap_api_youtube_feature");
        this.ap_api_youtube_sort_v = d("#ap_api_youtube_sort_v");
        this.api_res_sell_all = d("#api_res_sell_all").change(function (a) {
            var c = d(this);
            d(b.resultsBoxArr).each(function () {
                var b = d(this).data("api_results_cb");
                c.is(":checked") ? (b.prop("checked", !0), d(this).removeClass("result_box").addClass("result_box_on")) : (b.prop("checked", !1), d(this).removeClass("result_box_on").addClass("result_box"))
            })
        });
        d("#ap_api_execute, #ap_api_get").find("span").css("cursor", "pointer").bind("click", function (a) {
            if (!b._componentInited || b._playlistTransitionOn || !b.dataFeature) return !1;
            b._videoProcessCounter = 0;
            b._videoProcessData = [];
            b._videoProcessDataUrl = [];
            if ("ap_api_get" == d(a.currentTarget).parent().attr("id")) {
                if (!f()) return !1;
                b.noPlaylistCreation = !0
            } else {
                if (/vimeo/.test(b.dataFeature)) {
                    if ("vimeo_videos.search" != b.dataFeature) {
                        if (b.isEmpty(b.ap_api_path_title_v.val())) return b.ap_api_path_title.addClass("ap_hap_error"), alert("Please fill missing fields!"), !1
                    } else if (b.isEmpty(b.ap_api_query_v.val())) return b.ap_api_query_title.addClass("ap_hap_error"), alert("Please fill missing fields!"), !1;
                    a = {
                        fromapi: !0
                    };
                    a.type = b.ap_api_vimeo_feature_v.val();
                    a.path = a.id = b.ap_api_path_title_v.val();
                    a.sort = b.ap_api_vimeo_sort_v.val();
                    a.limit = parseInt(b.ap_api_limit_v.val(), 10);
                    a.query = b.ap_api_query_v.val();
                    b.useDeeplink && (a.deeplink = b.ap_api_vimeo_feature_v.val());
                    b._videoProcessDataUrl.push(a)
                } else if ("block" === b.ap_api_get.css("display")) {
                    if (0 == b.resultsDataArr.length) return alert("No results to process!"), !1;
                    d(b.resultsBoxArr).each(function () {
                        if (d(this).hasClass("result_box_on")) {
                            var a = d(this).attr("data-id"),
                                a = b.resultsDataArr[a],
                                c = {
                                    fromapi: !0
                                };
                            "youtube_user_uploads" == d(this).attr("data-type") ? c.type = "youtube_user_uploads" : c.type = "youtube_playlist";
                            c.path = c.id = a.id;
                            c.sort = "position";
                            c.limit = "";
                            c.query = "";
                            b.useDeeplink && (c.deeplink = d(this).attr("data-type"));
                            b._videoProcessDataUrl.push(c)
                        }
                    });
                    if (0 == b._videoProcessDataUrl.length) return alert("No items selected!"), !1
                } else if (!f()) return !1;
                if ("yes" != b.ap_api_append.find('input:radio[name="ap_api_append"]:checked').val() && (b.destroyPlaylist(), b.useDeeplink)) {
                    b.activeCategory = null;
                    b.secondLevelExist = !1;
                    b.secondLevel = null;
                    a = 0;
                    var c = b.categoryArr.length;
                    for (a; a < c; a++) b.categoryArr[a] && b.categoryArr[a].fromapi && b.categoryArr.splice(a, 1)
                }
            }
            b._playlistLength = b._videoProcessDataUrl.length;
            b.apiCreation = !0;
            b._processJson();
            return !1
        });
        this.ap_api_vimeo_feature_v = d("#ap_api_vimeo_feature_v").change(function () {
            b.dataFeature = d(this).val();
            b.cleanApiResults();
            b.resetResults();
            "vimeo_videos.singleVideo" == b.dataFeature ? b.ap_api_path_title.html("Enter video ID:") : "vimeo_videos.getAll" == b.dataFeature ? b.ap_api_path_title.html("Enter user ID:") : "vimeo_videos.getAppearsIn" == b.dataFeature ? b.ap_api_path_title.html("Enter user ID:") : "vimeo_videos.getLikes" == b.dataFeature ? b.ap_api_path_title.html("Enter user ID:") : "vimeo_videos.getUploaded" == b.dataFeature ? b.ap_api_path_title.html("Enter user ID:") : "vimeo_videos.search" == b.dataFeature ? b.ap_api_path_title.html("Enter user ID: (optional)") : "vimeo_groups.getVideos" == b.dataFeature ? b.ap_api_path_title.html("Enter group ID:") : "vimeo_channels.getVideos" == b.dataFeature ? b.ap_api_path_title.html("Enter channel ID:") : "vimeo_albums.getVideos" == b.dataFeature && b.ap_api_path_title.html("Enter album ID:");
            "vimeo_videos.singleVideo" == b.dataFeature ? b.ap_api_num_res.hide() : b.ap_api_num_res.show();
            "vimeo_videos.singleVideo" != b.dataFeature && "vimeo_channels.getVideos" != b.dataFeature && "vimeo_albums.getVideos" != b.dataFeature ? b.ap_api_feature_sort.show() : b.ap_api_feature_sort.hide();
            "vimeo_groups.getVideos" == b.dataFeature ? (b.toggleOption(d("#ap_sort_featured"), !0), b.toggleOption(d("#ap_sort_random"), !0)) : (b.toggleOption(d("#ap_sort_featured")), b.toggleOption(d("#ap_sort_random")));
            "vimeo_videos.search" == b.dataFeature ? (b.ap_api_query.show(), b.toggleOption(d("#ap_sort_relevant"), !0), b.ap_api_query_v.select(), b.ap_api_path_title_v.val("")) : (b.ap_api_query.hide(), b.toggleOption(d("#ap_sort_relevant")), b.ap_api_path.show(), b.ap_api_path_title_v.select())
        });
        this.ap_api_youtube_feature_v = d("#ap_api_youtube_feature_v").change(function () {
            b.dataFeature = d(this).val();
            b.cleanApiResults();
            b.resetResults();
            "youtube_single" == b.dataFeature ? b.ap_api_path_title.html("Enter video ID:") : "youtube_playlist" == b.dataFeature ? b.ap_api_path_title.html("Enter playlist ID:") : "youtube_user_favourites" == b.dataFeature ? b.ap_api_path_title.html("Enter user ID:") : "youtube_user_uploads" == b.dataFeature ? b.ap_api_path_title.html("Enter user ID:") : "youtube_user_playlists" == b.dataFeature ? b.ap_api_path_title.html("Enter user ID:") : "youtube_related_video_query" == b.dataFeature && b.ap_api_path_title.html("Enter video ID:");
            "youtube_single" == b.dataFeature ? b.ap_api_num_res.hide() : b.ap_api_num_res.show();
            "youtube_video_query" == b.dataFeature || "youtube_related_video_query" == b.dataFeature || "youtube_playlist" == b.dataFeature ? b.ap_api_feature_sort.show() : b.ap_api_feature_sort.hide();
            "youtube_video_query" == b.dataFeature || "youtube_related_video_query" == b.dataFeature ? (b.toggleOption(d("#ap_sort_relevance"), !0), b.toggleOption(d("#ap_sort_rating"), !0), b.toggleOption(d("#ap_sort_position")), b.toggleOption(d("#ap_sort_commentCount")), b.toggleOption(d("#ap_sort_duration")), b.toggleOption(d("#ap_sort_reversedPosition")), b.toggleOption(d("#ap_sort_title")), b.ap_api_youtube_sort_v.val("relevance")) : "youtube_playlist" == b.dataFeature && (b.toggleOption(d("#ap_sort_relevance")), b.toggleOption(d("#ap_sort_rating")), b.toggleOption(d("#ap_sort_position"), !0), b.toggleOption(d("#ap_sort_commentCount"), !0), b.toggleOption(d("#ap_sort_duration"), !0), b.toggleOption(d("#ap_sort_reversedPosition"), !0), b.toggleOption(d("#ap_sort_title"), !0), b.ap_api_youtube_sort_v.val("position"));
            "youtube_video_query" == b.dataFeature || "youtube_playlist_query" == b.dataFeature || "youtube_channel_query" == b.dataFeature ? (b.ap_api_query.show(), b.ap_api_query_v.select(), b.ap_api_path.hide(), b.ap_api_path_title_v.val("")) : (b.ap_api_query.hide(), b.ap_api_path.show(), b.ap_api_path_title_v.select());
            "youtube_user_playlists" == b.dataFeature || "youtube_playlist_query" == b.dataFeature || "youtube_channel_query" == b.dataFeature ? (b.ap_api_append.hide(), b.ap_api_execute.hide(), b.ap_api_get.show()) : (b.ap_api_append.show(), b.ap_api_execute.show(), b.ap_api_get.hide())
        });
        d("#ap_video_type").find('input[name="ap_video_type_r"]:radio').change(function (a) {
            "vimeo" == d(this).filter(":checked").val() ? (b.ap_api_vimeo_feature_v.val(d("#ap_api_vimeo_feature_v option:first").val()), b.ap_api_youtube_feature.hide(), b.ap_api_youtube_sort_v.hide(), b.ap_api_vimeo_feature.show(), b.ap_api_vimeo_sort_v.show(), b.ap_api_vimeo_feature_v.change()) : "youtube" == d(this).filter(":checked").val() && (b.ap_api_youtube_feature_v.val(d("#ap_api_youtube_feature_v option:first").val()), b.ap_api_youtube_feature.show(), b.ap_api_youtube_sort_v.show(), b.ap_api_vimeo_feature.hide(), b.ap_api_vimeo_sort_v.hide(), b.ap_api_youtube_feature_v.change());
            b.cleanApiResults();
            b.resetResults()
        }).change();
        var l = [this.prev_v, this.prev, this.prev_v_on, this.prev_on, this.next_v, this.next, this.next_v_on, this.next_on, this._switch, this._switch_on],
            n = 0,
            m = l.length;
        for (n; n < m; n++) d(new Image).load(function () {}).error(function (b) {}).attr("src", l[n]);
        "buttons" == this.scrollType && this.hasTouch && k();
        this.advance_controls = this.componentWrapper.find(".advance_controls");
        this.playlist_prev = this.componentWrapper.find(".playlist_prev").css("cursor", "pointer").bind("click", function () {
            if (!b._componentInited || b._playlistTransitionOn) return !1;
            b._enableActiveItem();
            b._playlistManager.advanceHandler(-1);
            return !1
        });
        this.playlist_toggle = this.componentWrapper.find(".playlist_toggle").css("cursor", "pointer").bind("click", function () {
            if (!b._componentInited || b._playlistTransitionOn || !b.thumbHolder) return !1;
            b._togglePlaylist();
            return !1
        });
        this.playlist_next = this.componentWrapper.find(".playlist_next").css("cursor", "pointer").bind("click", function () {
            if (!b._componentInited || b._playlistTransitionOn) return !1;
            b._enableActiveItem();
            b._playlistManager.advanceHandler(1);
            return !1
        });
        this.playlist_switch = this.componentWrapper.find(".playlist_switch").css("cursor", "pointer").bind("click", function () {
            if (!b._componentInited || b._playlistTransitionOn || !b.thumbHolder) return !1;
            b._switchLayout();
            return !1
        });
        this.isMobile || (this.playlist_prev.bind("mouseover", function () {
            if (!b._componentInited) return !1;
            var a = "horizontal" == b._thumbOrientation ? b.prev_on : b.prev_v_on;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }).bind("mouseout", function () {
            if (!b._componentInited) return !1;
            var a = "horizontal" == b._thumbOrientation ? b.prev : b.prev_v;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }), this.playlist_toggle.bind("mouseover", function () {
            if (!b._componentInited) return !1;
            var a = b._playlistOpened ? "horizontal" == b._thumbOrientation ? b.next_v_on : b.next_on : "horizontal" == b._thumbOrientation ? b.prev_v_on : b.prev_on;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }).bind("mouseout", function () {
            if (!b._componentInited) return !1;
            var a = b._playlistOpened ? "horizontal" == b._thumbOrientation ? b.next_v : b.next : "horizontal" == b._thumbOrientation ? b.prev_v : b.prev;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }), this.playlist_next.bind("mouseover", function () {
            if (!b._componentInited) return !1;
            var a = "horizontal" == b._thumbOrientation ? b.next_on : b.next_v_on;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }).bind("mouseout", function () {
            if (!b._componentInited) return !1;
            var a = "horizontal" == b._thumbOrientation ? b.next : b.next_v;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }), this.playlist_switch.bind("mouseover", function () {
            if (!b._componentInited) return !1;
            var a = b._switch_on;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }).bind("mouseout", function () {
            if (!b._componentInited) return !1;
            var a = b._switch;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }), "buttons" == this.scrollType && (this.thumbForward.bind("mouseover", function () {
            if (!b._componentInited) return !1;
            var a = "horizontal" == b._thumbOrientation ? b.next_on : b.next_v_on;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }).bind("mouseout", function () {
            if (!b._componentInited) return !1;
            var a = "horizontal" == b._thumbOrientation ? b.next : b.next_v;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }), this.thumbBackward.bind("mouseover", function () {
            if (!b._componentInited) return !1;
            var a = "horizontal" == b._thumbOrientation ? b.prev_on : b.prev_v_on;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        }).bind("mouseout", function () {
            if (!b._componentInited) return !1;
            var a = "horizontal" == b._thumbOrientation ? b.prev : b.prev_v;
            d(this).css("background-image", 'url("' + a + '")');
            return !1
        })));
        this.controls_prev;
        this.controls_next;
        this.componentWrapper.find(".controls").length && (this.controls_prev = this.componentWrapper.find(".controls_prev").css("cursor", "pointer").bind("click", function () {
            if (!b._componentInited || b._playlistTransitionOn) return !1;
            b.previousMedia();
            return !1
        }), this.controls_next = this.componentWrapper.find(".controls_next").css("cursor", "pointer").bind("click", function () {
            if (!b._componentInited || b._playlistTransitionOn) return !1;
            b.nextMedia();
            return !1
        }), this.componentWrapper.find(".controls").css("display", "block"), this.isMobile || (this.controls_prev && this.controls_prev.bind("mouseover", function () {
            if (!b._componentInited) return !1;
            var a = b.ic_controls_prev_on;
            d(this).css("backgroundImage", "url(" + a + ")");
            return !1
        }).bind("mouseout", function () {
            if (!b._componentInited) return !1;
            var a = b.ic_controls_prev;
            d(this).css("backgroundImage", "url(" + a + ")");
            return !1
        }), this.controls_next && this.controls_next.bind("mouseover", function () {
            if (!b._componentInited) return !1;
            var a = b.ic_controls_next_on;
            d(this).css("backgroundImage", "url(" + a + ")");
            return !1
        }).bind("mouseout", function () {
            if (!b._componentInited) return !1;
            var a = b.ic_controls_next;
            d(this).css("backgroundImage", "url(" + a + ")");
            return !1
        })));
        this._componentFixedSize || this._window.bind("resize", function () {
            if (!b._componentInited) return !1;
            b._windowResizeIntervalID && clearInterval(b._windowResizeIntervalID);
            b._windowResizeIntervalID = setTimeout(function () {
                b._doneResizing()
            }, b._windowResizeInterval);
            return !1
        });
        this._playlistManager = d.playlistManager({
            randomPlay: this.randomPlay,
            loopingOn: this.loopingOn
        });
        d(this._playlistManager).bind("ap_PlaylistManager.COUNTER_READY", function () {
            b.useDeeplink ? b._addressSet ? (b._addressSet = !1, b._disableActiveItem(), b._findMedia()) : (d.address.value(b.findAddress2(b._playlistManager.getCounter())), d.address.history() || d.address.history(!0)) : (b._disableActiveItem(), b._findMedia())
        });
        d(this._playlistManager).bind("ap_PlaylistManager.PLAYLIST_END", function () {
            b._disableActiveItem()
        });
        if (this.useDeeplink = this.settings.useDeeplink) {
            this.categoryArr = [];
            var p;
            this.componentPlaylist.children("ul[data-address]").each(function () {
                var a = {};
                p = d(this);
                a.categoryName = p.attr("data-address");
                a.id = p.attr("id");
                b.categoryArr.push(a)
            });
            this.deeplinkUniqueCounter = this.categoryArr.length + 1;
            this._activePlaylist;
            this.currentProcessDeeplink;
            this.secondLevelExist = !1;
            this.secondLevel;
            this.firstLevel;
            this.deepLink;
            this._addressInited = this._addressSet = !1;
            this.addressTimeout = 500;
            this.addressTimeoutID;
            this._externalChangeEvent;
            this.startUrl = this.settings.startUrl;
            this.activeCategory;
            this.currentCategory;
            this.activeItem;
            this.transitionFinishInterval = 100;
            this.transitionFinishIntervalID;
            d.address.internalChange(function (a) {
                a.stopPropagation();
                this.reCheckAddressTimeoutID && clearTimeout(this.reCheckAddressTimeoutID);
                b.onChange(a)
            });
            d.address.externalChange(function (a) {
                a.stopPropagation();
                this.reCheckAddressTimeoutID && clearTimeout(this.reCheckAddressTimeoutID);
                b._externalChangeEvent = a;
                if (b._playlistTransitionOn) b.addressTimeoutID && clearTimeout(b.addressTimeoutID), b.transitionFinishIntervalID && clearInterval(b.transitionFinishIntervalID), b.transitionFinishIntervalID = setInterval(g, b.transitionFinishInterval);
                else if (b._addressInited) b.addressTimeoutID && clearTimeout(b.addressTimeoutID), b.addressTimeoutID = setTimeout(e, b.addressTimeout);
                else if ("/" == a.value) b._addressSet = !0, d.address.history(!1), b.isEmpty(b.startUrl) ? (b._doneResizing(!0), b._endInit()) : (d.address.value(b.startUrl), d.address.history() || d.address.history(!0));
                else if (b.isEmpty(a.value)) b._addressSet = !0, d.address.history(!1), b.isEmpty(b.startUrl) || (d.address.value(b.startUrl), d.address.history() || d.address.history(!0));
                else b.onChange(a)
            })
        } else this._activePlaylist = this.settings.activePlaylist, b.isEmpty(b._activePlaylist) ? (this._doneResizing(!0), this._endInit()) : this._setPlaylist()
    }
    q.prototype = {
        getIsMobile: function () {
            return this.isMobile
        },
        getDescription: function (a) {
            if (!this._componentInited || this._playlistTransitionOn) return !1;
            if (this.useDeeplink)
                if (a)
                    if ("string" === typeof a)
                        if (0 < a.indexOf("/")) {
                            "/" == a.charAt(0) && (a = a.substring(1));
                            "/" == a.charAt(a.length - 1) && (a = a.substring(0, a.length - 1));
                            a = a.substring(a.lastIndexOf("/") + 1);
                            if (-1 == this.findCounterByName2(a)) return alert("Invalid value for getDescription Deeplink! Wrong deeplink!"), !1;
                            a = this.findCounterByName2(a)
                        } else return alert("Invalid value for getDescription Deeplink! Two level deeplink needed!"), !1;
            else return alert("Invalid value for getDescription Deeplink! String needed!"), !1;
            else {
                if (-1 == this._playlistManager.getCounter()) return alert("No active Item for description, counter = -1"), !1;
                a = this._playlistManager.getCounter()
            } else if (a)
                if ("number" === typeof a) a > this._playlistLength - 1 ? a = this._playlistLength - 1 : 0 > a && (a = 0);
                else return alert("Invalid value loadMedia no Deeplink! Number needed!"), !1;
            else {
                if (-1 == this._playlistManager.getCounter()) return alert("No active Item for description, counter = -1"), !1;
                a = this._playlistManager.getCounter()
            }
            return this.playlistDataArr[a] ? this.playlistDataArr[a].description : null
        },
        playMedia: function () {
            this._componentInited && !this._playlistTransitionOn && this._mediaType && ("vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.play() : "youtube" == this._mediaType && this._youtubePlayer && this._youtubePlayer.play(), this.mediaPlaying = !0)
        },
        pauseMedia: function () {
            this._componentInited && !this._playlistTransitionOn && this._mediaType && ("vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.pause() : "youtube" == this._mediaType && this._youtubePlayer && this._youtubePlayer.pause(), this.mediaPlaying = !1)
        },
        toggleMedia: function () {
            this._componentInited && !this._playlistTransitionOn && this._mediaType && (this.mediaPlaying ? ("vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.pause() : "youtube" == this._mediaType && this._youtubePlayer && this._youtubePlayer.pause(), this.mediaPlaying = !1) : ("vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.play() : "youtube" == this._mediaType && this._youtubePlayer && this._youtubePlayer.play(), this.mediaPlaying = !0))
        },
        nextMedia: function () {
            this._componentInited && !this._playlistTransitionOn && (this._enableActiveItem(), this._playlistManager.advanceHandler(1, !0))
        },
        previousMedia: function () {
            this._componentInited && !this._playlistTransitionOn && (this._enableActiveItem(), this._playlistManager.advanceHandler(-1, !0))
        },
        destroyMedia: function () {
            this._componentInited && this._mediaType && (this._mediaType && this._cleanMedia(), this._enableActiveItem(), this._playlistManager.reSetCounter())
        },
        destroyPlaylist: function () {
            if (!this._componentInited) return !1;
            "buttons" == this.scrollType && (this.togglePrevBtn("off"), this.toggleNextBtn("off"));
            this._mediaType && this._cleanMedia();
            this._playlistManager.reSetCounter();
            this.thumbInnerContainer.empty();
            this._thumbHolderArr = [];
            "horizontal" == this._thumbOrientation ? this.thumbInnerContainer.css("left", "0px") : this.thumbInnerContainer.css("top", "0px");
            this.playlistDataArr = [];
            this._autoInitActiveItem = !1
        },
        togglePlaylist: function () {
            this._componentInited && !this._playlistTransitionOn && this.thumbHolder && this._togglePlaylist()
        },
        switchLayout: function () {
            this._componentInited && !this._playlistTransitionOn && this.thumbHolder && this._switchLayout()
        },
        setVolume: function (a) {
            this._componentInited && !this._playlistTransitionOn && this._mediaType && (0 > a ? a = 0 : 1 < a && (a = 1), this._setVolume(a))
        },
        loadMedia: function (a) {
            if (!this._componentInited || this._playlistTransitionOn) return !1;
            if (this.useDeeplink)
                if ("string" === typeof a) d.address.value(a);
                else return alert("Invalid value loadMedia Deeplink!"), !1;
            else if ("number" === typeof a) 0 > a ? a = 0 : a > this._playlistLength - 1 && (a = this._playlistLength - 1), this._enableActiveItem(), this._playlistManager.processPlaylistRequest(a);
            else if ("string" === typeof a) {
                if (-1 != a.indexOf("/")) return alert("Invalid value loadMedia no Deeplink!"), !1;
                this._activePlaylist = a;
                this.destroyPlaylist();
                this._setPlaylist()
            } else return alert("Invalid value loadMedia no Deeplink!"), !1
        },
        getPlaylistData: function () {
            if (this._componentInited && !this._playlistTransitionOn) try {
                console.log(this.playlistDataArr)
            } catch (a) {}
        },
        filterAllowedChars: function (a) {
            var c = a.length,
                d = "",
                k = 0,
                g, e;
            for (k; k < c; k++)
                if (g = a.charAt(k).toLowerCase(), "\\" == g && (g = "/"), e = this.getCharCode(g), e >= this.getCharCode("a") && e <= this.getCharCode("z") || e >= this.getCharCode("0") && e <= this.getCharCode("9") || 0 <= "_-".indexOf(g)) d += g;
            return d
        },
        getCharCode: function (a) {
            return a.charCodeAt(0)
        },
        initAddress: function (a) {
            a.stopPropagation()
        },
        onChange: function (a) {
            a.stopPropagation();
            this.slideshowTimeoutID && clearTimeout(this.slideshowTimeoutID);
            this._addressInited || (this._addressInited = !0);
            if ("/" == a.value && (this._addressSet = !0, d.address.history(!1), !this.isEmpty(this.startUrl))) {
                d.address.value(this.startUrl);
                d.address.history() || d.address.history(!0);
                return
            }
            if (this.apiCreation) this._addressSet = this.apiCreation = !1;
            else {
                this.deepLink = a.value;
                "/" == this.deepLink.charAt(0) && (this.deepLink = this.deepLink.substring(1));
                "/" == this.deepLink.charAt(this.deepLink.length - 1) && (this.deepLink = this.deepLink.substring(0, this.deepLink.length - 1));
                a = this.findFirstLevel(this.deepLink);
                if (!this.findCategoryByName(a)) return -1 == d.inArray(a, this.fromApiAddresses) && alert("404 page not found, check your deeplinks first level!"), d.address.history(!1), !1;
                this._addressSet = !1;
                void 0 == this.currentCategory || this.currentCategory != this.activeCategory ? (void 0 != this.currentCategory && this.destroyPlaylist(), this._setPlaylist()) : this.secondLevel ? this.findCounterByName(this.secondLevel) ? this._playlistManager.getCounter() != this.activeItem ? (this._addressSet = !0, -1 != this._playlistManager.getCounter() && this._enableActiveItem(), this._playlistManager.setCounter(this.activeItem, !1)) : (this._disableActiveItem(), this._findMedia()) : (alert("404 page not found, check your deeplinks second level!"), d.address.history(!1)) : this.destroyMedia()
            }
        },
        findAddress: function (a) {
            a = a.split("/");
            var c = !1;
            2 != a.length && (c = !0);
            var d = a[0],
                k = !1,
                g = !1,
                e = 0,
                b = this.categoryArr.length;
            for (e; e < b; e++)
                if (this.categoryArr[e].categoryName == d) {
                    this.activeCategory = e;
                    k = !0;
                    break
                }
            if (!k) return !1;
            if (c)
                for (media_name = a[1], e = 0, a = this.categoryArr[this.activeCategory].mediaName, b = a.length, e; e < b; e++)
                    if (a[e] == media_name) {
                        this.activeItem = e;
                        g = !0;
                        break
                    }
            return k && g ? !0 : !1
        },
        findCounterByName: function (a) {
            var c = !1,
                d = 0,
                k = this.categoryArr[this.activeCategory].mediaName,
                g = k.length;
            for (d; d < g; d++)
                if (k[d] == a) {
                    this.activeItem = d;
                    c = !0;
                    break
                }
            return c ? !0 : !1
        },
        findCounterByName2: function (a) {
            var c = 0,
                d = this.categoryArr[this.activeCategory].mediaName,
                k = d.length,
                g = -1;
            for (c; c < k; c++)
                if (d[c] == a) {
                    g = c;
                    break
                }
            return g
        },
        findCategoryByName: function (a) {
            var c = !1,
                d = 0,
                k = this.categoryArr.length;
            for (d; d < k; d++)
                if (this.categoryArr[d].categoryName == a) {
                    this.activeCategory = d;
                    this._activePlaylist = this.categoryArr[d].id;
                    c = !0;
                    break
                }
            return c ? !0 : !1
        },
        findAddress2: function (a) {
            return this.categoryArr[this.activeCategory].categoryName + "/" + this.categoryArr[this.activeCategory].mediaName[a]
        },
        findFirstLevel: function (a) {
            var c;
            0 < a.indexOf("/") ? (this.secondLevelExist = !0, this.firstLevel = c = a.substr(0, a.indexOf("/")), this.secondLevel = a.substr(a.indexOf("/") + 1)) : (this.firstLevel = a, this.secondLevelExist = !1, this.secondLevel = null, c = a);
            return this.filterAllowedChars(c)
        },
        isEmpty: function (a) {
            return 0 == a.replace(/^\s+|\s+$/g, "").length
        },
        _checkProcessCounter: function (a) {
            this._videoProcessCounter++;
            this._videoProcessCounter > this._playlistLength - 1 ? this.noPlaylistCreation ? (this.noPlaylistCreation = !1, this._endInit()) : this._buildPlaylist() : this._processJson()
        },
        _processJson: function () {
            /youtube/.test(this._videoProcessDataUrl[this._videoProcessCounter].type) ? this._processYoutube() : this._processVimeo()
        },
        _getPlaylist: function () {
            this.currentCategory = this.activeCategory;
            var a = this;
            this._videoProcessCounter = 0;
            this._videoProcessData = [];
            this._videoProcessDataUrl = [];
            var c, f, k = d(this.componentPlaylist.find("ul[id=" + this._activePlaylist + "]"));
            this._playlistLength = k.children("li").size();
            k.children("li").each(function () {
                f = d(this);
                c = {};
                c.type = f.attr("data-type");
                c.path = c.id = f.attr("data-path");
                void 0 == f.attr("data-limit") || a.isEmpty(f.attr("data-limit")) ? c.limit = 1E3 : c.limit = parseInt(f.attr("data-limit"), 10);
                void 0 == f.attr("data-sort") || a.isEmpty(f.attr("data-sort")) || (c.sort = f.attr("data-sort"));
                void 0 == f.attr("data-query") || a.isEmpty(f.attr("data-query")) || (c.query = f.attr("data-query"));
                a.useDeeplink && (c.deeplink = f.attr("data-address"));
                a._videoProcessDataUrl.push(c)
            });
            this._processJson()
        },
        _processYoutube: function () {
            var a = this._videoProcessDataUrl[this._videoProcessCounter],
                c = a.type;
            this.useDeeplink && (a.fromapi ? -1 != d.inArray(c, this.youtubeTypeArr) ? this.currentProcessDeeplink = c.replace(/\./g, "_") + parseInt(99999999 * Math.random(), 10) : this.currentProcessDeeplink = "youtube_single" == c ? c.replace(/\./g, "_") + parseInt(99999999 * Math.random(), 10) : a.deeplink : this.currentProcessDeeplink = a.deeplink);
            "youtube_single" == c ? this._processYoutubeSingle(a) : -1 != d.inArray(c, this.youtubeTypeArr) ? (this.deeplinkCounter = 0, this.youtubeCounter = 1, this.isNumber(a.limit) ? this.youtubeLimit = a.limit : this.youtubeLimit = 1E3, this.mediaPreloader.css("display", "block"), this._checkYoutube()) : (alert("Invalid data-type in playlist!"), this._endLoad())
        },
        _checkYoutube: function () {
            var a = this._videoProcessDataUrl[this._videoProcessCounter],
                c = a.type,
                d = a.id;
            "youtube_playlist" == c ? a.path = "http://gdata.youtube.com/feeds/api/playlists/" + d + "?start-index=" + this.youtubeCounter + "&max-results=" + this.youtubeEnlargeCounter + "&orderby=" + a.sort + "&v=2&format=5&alt=jsonc" : "youtube_user_favourites" == c ? a.path = "http://gdata.youtube.com/feeds/api/users/" + d + "/favorites?start-index=" + this.youtubeCounter + "&max-results=" + this.youtubeEnlargeCounter + "&v=2&format=5&alt=jsonc" : "youtube_user_uploads" == c ? a.path = "http://gdata.youtube.com/feeds/api/users/" + d + "/uploads?start-index=" + this.youtubeCounter + "&max-results=" + this.youtubeEnlargeCounter + "&v=2&format=5&alt=jsonc" : "youtube_video_query" == c ? a.path = "http://gdata.youtube.com/feeds/api/videos?q=" + a.query + "&start-index=" + this.youtubeCounter + "&max-results=" + this.youtubeEnlargeCounter + "&orderby=" + a.sort + "&v=2&format=5&alt=jsonc" : "youtube_related_video_query" == c ? a.path = "http://gdata.youtube.com/feeds/api/videos/" + d + "/related?&start-index=" + this.youtubeCounter + "&max-results=" + this.youtubeEnlargeCounter + "&orderby=" + a.sort + "&v=2&format=5&alt=jsonc" : "youtube_user_playlists" == c ? a.path = "http://gdata.youtube.com/feeds/api/users/" + d + "/playlists?start-index=" + this.youtubeCounter + "&max-results=" + this.youtubeEnlargeCounter + "&v=2&format=5&alt=jsonc" : "youtube_playlist_query" == c ? a.path = "https://gdata.youtube.com/feeds/api/playlists/snippets?q=" + a.query + "&start-index=" + this.youtubeCounter + "&max-results=" + this.youtubeEnlargeCounter + "&v=2&format=5&alt=jsonc" : "youtube_channel_query" == c ? a.path = "http://gdata.youtube.com/feeds/api/channels?q=" + a.query + "&start-index=" + this.youtubeCounter + "&max-results=" + this.youtubeEnlargeCounter + "&v=2&format=5" : "youtube_standard_feed" == c && (a.path = "http://gdata.youtube.com/feeds/api/standardfeeds/" + d + "?v=2&format=5&alt=jsonc");
            this._processYoutubeComplex(a)
        },
        _processYoutubeSingle: function (a) {
            var c = this;
            d.ajax({
                url: "http://gdata.youtube.com/feeds/api/videos/" + a.path + "?v=2&format=5&alt=jsonc",
                dataType: "jsonp"
            }).done(function (a) {
                c._processYotubeSingleSuccess(a)
            }).fail(function (a, d, g) {
                alert("There was an error retrieveing youtube data: " + a.responseText);
                c._endLoad()
            })
        },
        _processYoutubeComplex: function (a) {
            var c = this,
                f = a.path;
            c.youtubeType = a.type;
            d.ajax({
                url: f,
                dataType: "jsonp"
            }).done(function (a) {
                if (a.error) alert("There was an error retrieveing youtube data: " + a.error.message), "youtube_user_favourites" == n && "Not allowed." == a.error.message && alert("This user favourites are set to private!"), c._endLoad();
                else if ("youtube_channel_query" == c.youtubeType)
                    if (d(a).find("entry").length) {
                        var f = [],
                            e = 0,
                            b, l, n = "youtube_user_uploads";
                        d(a).find("entry").each(function () {
                            l = f[e];
                            b = {};
                            b.path = b.id = d(this).children("yt\\:channelId").text();
                            b.title = d(this).children("title").text();
                            b.description = d(this).children("summary").text();
                            b.author = d(this).children("author").text();
                            b.thumbnail = {
                                hqDefault: d(this).children("media\\:thumbnail").attr("url")
                            };
                            b.created = "";
                            f.push(b)
                        });
                        var m = f.length;
                        m + c.deeplinkCounter > c.youtubeLimit && (m = c.youtubeLimit - c.deeplinkCounter);
                        0 < m && (c.ap_api_results.show(), c.ap_api_append.show(), c.ap_api_execute.show());
                        for (e; e < m; e++) l = f[e], c.buildBox(n, l, c.deeplinkCounter), c.deeplinkCounter++;
                        c.updateApiResScroll();
                        c.youtubeCounter += c.youtubeEnlargeCounter;
                        c.youtubeCounter <= c.youtubeLimit ? c._checkYoutube() : c._checkProcessCounter()
                    } else alert("Youtube channel response is empty!"), c._checkProcessCounter();
                else if (a.data.items) {
                    m = a.data.items.length;
                    e = 0;
                    m + c.deeplinkCounter > c.youtubeLimit && (m = c.youtubeLimit - c.deeplinkCounter);
                    if ("youtube_playlist_query" == c.youtubeType || "youtube_user_playlists" == c.youtubeType) {
                        0 < m && (c.ap_api_results.show(), c.ap_api_append.show(), c.ap_api_execute.show());
                        for (e; e < m; e++) l = a.data.items[e], c.buildBox("youtube_playlist", l, c.deeplinkCounter), c.deeplinkCounter++;
                        c.updateApiResScroll()
                    } else
                        for (e; e < m; e++)(l = "youtube_user_uploads" == c.youtubeType || "youtube_video_query" == c.youtubeType || "youtube_related_video_query" == c.youtubeType || "youtube_standard_feed" == c.youtubeType ? a.data.items[e] : a.data.items[e].video) && l.accessControl && (b = {}, c.useDeeplink && (b.deeplink = c.currentProcessDeeplink + (c.deeplinkCounter + 1).toString()), b.type = "youtube", b.path = b.id = l.id, b.title = l.title ? l.title : "", b.description = l.description ? l.description : "", l.thumbnail && (b.thumbnail = l.thumbnail.hqDefault ? l.thumbnail.hqDefault : l.thumbnail.sqDefault), c._videoProcessData.push(b), c.deeplinkCounter++);
                    c.youtubeCounter += c.youtubeEnlargeCounter;
                    c.youtubeCounter <= c.youtubeLimit ? c._checkYoutube() : c._checkProcessCounter()
                } else 0 == c._videoProcessData.length && alert("Youtube response contains no results!"), c._checkProcessCounter()
            }).fail(function (a, d, e) {
                alert("There was an error retrieveing youtube data: " + a.responseText);
                c._endLoad()
            })
        },
        _processYotubeSingleSuccess: function (a) {
            var c = {};
            (a = a.data) && a.accessControl ? (c.type = "youtube", this.useDeeplink && (c.deeplink = this.currentProcessDeeplink), c.path = c.id = a.id, c.title = a.title ? a.title : "", c.description = a.description ? a.description : "", a.thumbnail && (c.thumbnail = a.thumbnail.hqDefault ? a.thumbnail.hqDefault : a.thumbnail.sqDefault), this._videoProcessData.push(c)) : alert("Youtube single video not found!");
            this._checkProcessCounter()
        },
        _processVimeo: function () {
            var a = this._videoProcessDataUrl[this._videoProcessCounter],
                c = a.type;
            this.useDeeplink && (a.fromapi ? -1 != d.inArray(c, this.vimeoTypeArr) ? this.currentProcessDeeplink = c.replace(/\./g, "_") + parseInt(99999999 * Math.random(), 10) : this.currentProcessDeeplink = "vimeo_videos.singleVideo" == c ? c.replace(/\./g, "_") + parseInt(99999999 * Math.random(), 10) : a.deeplink : this.currentProcessDeeplink = a.deeplink);
            "vimeo_videos.singleVideo" == c ? this._processVimeoSingle(a) : -1 != d.inArray(c, this.vimeoTypeArr) ? (this.isNumber(a.limit) ? this.vimeoLimit = a.limit : this.vimeoLimit = 1E3, this.vimeoDataTaken = !1, this.deeplinkCounter = 0, this.vimeoPage = 1, this.mediaPreloader.css("display", "block"), this._processVimeoComplex()) : (alert("Invalid data-type in playlist!"), this._endLoad())
        },
        _processVimeoSingle: function (a) {
            var c = this;
            d.ajax({
                url: "http://vimeo.com/api/v2/video/" + a.path + ".json",
                dataType: "jsonp"
            }).done(function (a) {
                c._processVimeoSingleSuccess(a)
            }).fail(function (a, d, g) {
                alert("There was an error retrieveing vimeo data: " + a.responseText);
                c._endLoad()
            })
        },
        _processVimeoComplex: function () {
            var a = this,
                c = this._videoProcessDataUrl[this._videoProcessCounter],
                f = "/media/videogallery/includes/vimeo_data.php?rand=" + 99999999 * Math.random(),
                c = {
                    type: c.type.substr(6),
                    id: c.path,
                    page: a.vimeoPage,
                    password: "",
                    sort: c.sort,
                    query: c.query
                };
            d.ajax({
                type: "GET",
                url: f,
                data: c,
                dataType: "json"
            }).done(function (c) {
                a.vimeoDataTaken || (a.vimeoDataTaken = !0, a.vimeoLimit > c.videos.total && (a.vimeoLimit = c.videos.total), a.vimeoTotalPages = Math.ceil(c.videos.total / 50), a.vimeoTotalPages > Math.ceil(a.vimeoLimit / 50) && (a.vimeoTotalPages = Math.ceil(a.vimeoLimit / 50)));
                var d = c.videos.video.length,
                    e = 0,
                    b, f;
                d + a.deeplinkCounter > a.vimeoLimit && (d = a.vimeoLimit - a.deeplinkCounter);
                for (e; e < d; e++) f = c.videos.video[e], b = {}, a.useDeeplink && (b.deeplink = a.currentProcessDeeplink + (a.deeplinkCounter + 1).toString()), b.type = "vimeo", b.id = f.id, f.duration && (b.duration = f.duration), f.title && (b.title = f.title), f.description && (b.description = f.description), f.thumbnails && f.thumbnails.thumbnail[0] && (b.thumbnail = f.thumbnails.thumbnail[0]._content), f.width && (b.width = f.width), f.height && (b.height = f.height), a._videoProcessData.push(b), a.deeplinkCounter++;
                a.vimeoPage < a.vimeoTotalPages ? (a.vimeoPage += 1, a._processVimeoComplex()) : (0 == a._videoProcessData.length && alert("Vimeo response contains no results!"), a._checkProcessCounter())
            }).fail(function (c, d, f) {
                alert("There was an error retrieveing vimeo data: " + c.responseText);
                a._endLoad()
            })
        },
        _processVimeoSingleSuccess: function (a) {
            if ("anywhere" === a[0].embed_privacy) {
                var c = {};
                a = a[0];
                c.type = "vimeo";
                this.useDeeplink && (c.deeplink = this.currentProcessDeeplink);
                c.id = a.id;
                a.title && (c.title = a.title);
                a.description && (c.description = a.description);
                a.thumbnail_medium && (c.thumbnail = a.thumbnail_medium);
                this._videoProcessData.push(c)
            } else alert("Vimeo response contains no results!");
            this._checkProcessCounter()
        },
        buildBox: function (a, c, f) {
            var k = this,
                g = d("<div/>").attr({
                    "data-type": a,
                    "data-path": c.path
                }).addClass("result_box").appendTo(k.ap_api_results_wrap);
            f = [];
            k.resultsDataArr.push(c);
            k.resultsBoxArr.push(g);
            f.push(g);
            var e = d('<input type="checkbox" name="api_results" title="Select">').css("cursor", "pointer").click(function (a) {
                a.stopPropagation()
            }).addClass("api_results_cb").appendTo(g);
            d("<span>Select</span>").addClass("ch_select").appendTo(g);
            g.data("api_results_cb", e);
            d('<a href="#" title="Remove"><img src="/media/videogallery/data/remove.png" alt="remove"/></a>').click(function (a) {
                a.stopPropagation();
                a = parseInt(d(this).parent().attr("data-id"), 10);
                k.resultsBoxArr[a] && k.resultsDataArr[a] && (k.resultsBoxArr[a].remove(), k.resultsBoxArr.splice(a, 1), k.resultsDataArr.splice(a, 1), k.updateApiResScroll());
                return !1
            }).addClass("api_results_rem_cb").appendTo(g);
            var g = d("<div/>").addClass("result_box_wrap").appendTo(g),
                e = d("<div/>").addClass("thumb_holder").appendTo(g),
                b = c.thumbnail.hqDefault ? c.thumbnail.hqDefault : c.thumbnail.sqDefault;
            d(new Image).attr({
                alt: c.title ? c.title : "thumb"
            }).addClass("thumb_result").appendTo(e).load(function () {}).error(function (a) {}).attr("src", b);
            g = d("<div/>").addClass("info_wrap").appendTo(g);
            e = d("<div/>").addClass("info_holder").appendTo(g);
            b = c.title;
            k.isEmpty(b) || (d('<p class="api_headers">TITLE:</p>').appendTo(e), d("<div>" + b + "</div>").addClass("api_title").appendTo(e));
            b = c.description;
            k.isEmpty(b) || (d('<p class="api_headers">DESCRIPTION:</p>').appendTo(e), d("<div>" + b + "</div>").addClass("api_title").appendTo(e));
            b = c.author;
            k.isEmpty(b) || (d('<p class="api_headers">AUTHOR:</p>').appendTo(e), d("<div>" + b + "</div>").addClass("api_title").appendTo(e));
            b = c.created;
            k.isEmpty(b) || (d('<p class="api_headers">CREATED:</p>').appendTo(e), d("<div>" + b.substr(0, 10) + "</div>").addClass("api_title").appendTo(e));
            "youtube_user_uploads" != a && (d('<span class="api_headers">NUMBER OF VIDEOS:</span>').appendTo(e), d("<div>" + c.size + "</div>").addClass("api_title").appendTo(e));
            g.jScrollPane({
                verticalDragMinHeight: 70,
                verticalDragMaxHeight: 70
            });
            k.ap_api_results_inner.find(".jspTrack").unbind("click").bind("click", function (a) {
                a.stopPropagation()
            });
            k.ap_api_results_inner.find(".jspDrag").unbind("click").bind("click", function (a) {
                a.stopPropagation()
            });
            k.addBoxEvents(f)
        },
        addBoxEvents: function (a) {
            d(a).each(function () {
                d(this).css("cursor", "pointer").bind("mouseenter", function (a) {
                    a || (a = self._window.event);
                    a.cancelBubble ? a.cancelBubble = !0 : a.stopPropagation && a.stopPropagation();
                    a = d(a.currentTarget);
                    a.attr("data-id");
                    a.removeClass("result_box").addClass("result_box_on");
                    return !1
                }).bind("mouseleave", function (a) {
                    a || (a = self._window.event);
                    a.cancelBubble ? a.cancelBubble = !0 : a.stopPropagation && a.stopPropagation();
                    a = d(a.currentTarget);
                    a.attr("data-id");
                    d(this).data("api_results_cb").is(":checked") || a.removeClass("result_box_on").addClass("result_box");
                    return !1
                }).bind("click", function (a) {
                    a || (a = self._window.event);
                    a.cancelBubble ? a.cancelBubble = !0 : a.stopPropagation && a.stopPropagation();
                    d(a.currentTarget).attr("data-id");
                    a = d(this).data("api_results_cb");
                    a.prop("checked", !a.prop("checked"));
                    return !1
                })
            })
        },
        updateApiResScroll: function () {
            var a = this,
                c = a.resultsBoxArr[0],
                f = 0;
            c ? (d(a.resultsBoxArr).each(function () {
                d(this).css("marginRight", "10px").attr("data-id", f);
                f++
            }), a.resultsBoxArr[a.resultsBoxArr.length - 1].css("marginRight", "0px"), a.ap_api_results_wrap.css({
                width: a.resultsBoxArr.length * c.outerWidth(!0) - parseInt(c.css("marginRight"), 10) + "px",
                height: c.height()
            }), a.ap_api_results_pane ? (a.ap_api_results_pane_api.reinitialise(), a.ap_api_results_pane_api.getIsScrollableH() || (a.ap_api_results_pane_api.scrollToX(0), a.ap_api_results_inner.find(".jspPane").css("left", "0px")), a.ap_api_results_pane.bind("jsp-initialised", function (c, d) {
                d || (a.ap_api_results_pane_api.scrollToX(0), a.ap_api_results_inner.find(".jspPane").css("left", "0px"))
            })) : (a.ap_api_results_pane = a.ap_api_results_inner, a.ap_api_results_pane.jScrollPane({
                horizontalDragMinWidth: 100,
                horizontalDragMaxWidth: 100
            }), a.ap_api_results_pane_api = a.ap_api_results_pane.data("jsp"), a.isMobile || a.ap_api_results_inner.bind("mousewheel", function (c, d, f, b) {
                if (a._componentInited && !a._playlistTransitionOn) return a.ap_api_results_pane_api && a.ap_api_results_pane_api.scrollByX(100 * (0 < d ? -1 : 1)), !1
            }))) : (a.cleanApiResults(), a.ap_api_append.hide(), a.ap_api_execute.hide(), a.ap_api_get.show(), a.ap_api_results.hide())
        },
        cleanApiResults: function () {
            this.resultsDataArr = [];
            this.resultsBoxArr = [];
            this.ap_api_results_wrap.empty()
        },
        resetResults: function () {
            this.ap_api_append.show();
            this.ap_api_execute.show();
            this.ap_api_get.hide();
            this.ap_api_results.hide()
        },
        _buildPlaylist: function () {
            var a = this,
                c = 0,
                f = this.playlistDataArr.length,
                k = this._videoProcessData.length,
                g, e;
            if (this.useDeeplink) {
                if (!this.activeCategory && 0 !== this.activeCategory) {
                    var b = {};
                    e = "ap_playlist" + this.deeplinkUniqueCounter;
                    this.fromApiAddresses.push(e);
                    this.deeplinkUniqueCounter++;
                    b.categoryName = b.id = e;
                    b.fromapi = !0;
                    this.categoryArr.push(b);
                    this.currentCategory = this.activeCategory = this.categoryArr.length - 1;
                    this.firstLevel = e;
                    d.address.value(e)
                }
                this.categoryArr[this.activeCategory].mediaName ? b = this.categoryArr[this.activeCategory].mediaName : (b = [], this.categoryArr[this.activeCategory].mediaName = b);
                e = d.address.strict() ? "#/" : "#";
                var l = this.baseURL + e + this.firstLevel + "/"
            }
            for (c; c < k; c++) e = this._videoProcessData[c], this.useDeeplink && (g = this.filterAllowedChars(e.deeplink), b.push(g)), g = d("<div/>").attr({
                "data-type": e.type,
                "data-path": e.id
            }).css({
                opacity: 0,
                cursor: "pointer"
            }), this.thumbHolder && (g.appendTo(this.thumbInnerContainer).bind("click", function (b) {
                if (a._componentInited && !a._playlistTransitionOn && (b || (b = a._window.event), b.cancelBubble ? b.cancelBubble = !0 : b.stopPropagation && b.stopPropagation(), b = d(b.currentTarget).attr("data-id"), b != a._playlistManager.getCounter())) return a._enableActiveItem(), a._playlistManager.processPlaylistRequest(b), a.thumbHolder && a._closePlaylistOnVideoSelect && a._togglePlaylist(), !1
            }).stop().animate({
                opacity: 1
            }, {
                duration: 500,
                easing: "easeOutSine"
            }), this.isMobile || g.bind("mouseenter", function (b) {
                if (a._componentInited && !a._playlistTransitionOn) {
                    b || (b = a._window.event);
                    b.cancelBubble ? b.cancelBubble = !0 : b.stopPropagation && b.stopPropagation();
                    var c = d(b.currentTarget);
                    c.attr("data-id");
                    if (b = c.find("div[data-title='titleDiv']")) c = c.height() - b.outerHeight(), 0 > c && (c = 0), b.stop().animate({
                        top: c + "px"
                    }, {
                        duration: 300,
                        easing: "easeOutQuart"
                    });
                    return !1
                }
            }).bind("mouseleave", function (b) {
                if (a._componentInited && !a._playlistTransitionOn && (b || (b = a._window.event), b.cancelBubble ? b.cancelBubble = !0 : b.stopPropagation && b.stopPropagation(), b = d(b.currentTarget), b.attr("data-id") != a._playlistManager.getCounter())) {
                    var c = b.find("div[data-title='titleDiv']");
                    c && c.stop().animate({
                        top: b.height() + "px"
                    }, {
                        duration: 300,
                        easing: "easeOutQuart"
                    });
                    return !1
                }
            })), this._thumbHolderArr.push(g), this.playlistDataArr.push({
                id: c + f,
                type: e.type,
                "video-id": e.id,
                title: e.title ? e.title : "",
                description: e.description ? e.description : "",
                deeplink: l + e.deeplink
            }), this.thumbHolder && (e.thumbnail && d(new Image).attr({
                alt: e.title ? e.title : "thumb"
            }).addClass("thumb_img").appendTo(g).load(function () {}).error(function (a) {}).attr("src", e.thumbnail), d("<div/>").attr("data-title", "titleDiv").addClass("title_holder").appendTo(g));
            if (this.thumbHolder)
                for (c = this._thumbInnerContainerSize = 0, k = this._thumbHolderArr.length, c; c < k; c++) g = this._thumbHolderArr[c].attr("data-id", c).find("img[class=thumb_img]").attr("data-id", c), f = d("<p><span>" + this.playlistDataArr[c].title + "</span></p>").addClass("title"), this._thumbHolderArr[c].find("div[data-title='titleDiv']").html(f);
            this._playlistLength = this.playlistDataArr.length;
            this._playlistManager.setPlaylistItems(this._playlistLength);
            this.thumbHolder && !this._autoOpenPlaylistInit && !this._playlistOpened && 0 < this._playlistLength && (this._autoOpenPlaylistInit = !0, this._autoOpenPlaylist && this._togglePlaylist());
            this.thumbHolder && d(".title_holder").dotdotdot();
            this.apiCreation = !1;
            this._doneResizing(!0);
            this._endInit();
            this._autoInitActiveItem || (this._autoInitActiveItem = !0, this.useDeeplink ? this.secondLevelExist && (this.findCounterByName(this.secondLevel) ? (this._addressSet = !0, this._playlistManager.setCounter(this.activeItem, !1)) : (alert("404 page not found, check your deeplinks second level!"), d.address.history(!1))) : (c = this.settings.activeItem, c > this._playlistLength - 1 && (c = this._playlistLength - 1), -1 < c && this._playlistManager.setCounter(c, !1)))
        },
        _endInit: function () {
            this._playlistTransitionOn = !1;
            this.mediaPreloader.css("display", "none");
            if (!this._componentInited) {
                var a = this;
                setTimeout(function () {
                    a.settings.videoGallerySetupDone.call(a)
                }, 50);
                this._componentInited = !0
            }
        },
        _setPlaylist: function () {
            this._playlistTransitionOn = !0;
            this.mediaPreloader.css("display", "block");
            this._getPlaylist()
        },
        _endLoad: function () {
            this._playlistTransitionOn = !1;
            this.mediaPreloader.css("display", "none")
        },
        _mediaAdvance: function () {
            this._enableActiveItem();
            this._playlistManager.advanceHandler(1, !0)
        },
        _findMedia: function () {
            this._mediaType && this._cleanMedia();
            var a = this._thumbHolderArr[this._playlistManager.getCounter()];
            this._mediaPath = a.attr("data-path");
            this._mediaType = a.attr("data-type");
            "vimeo" == this._mediaType ? this._initVimeo() : "youtube" == this._mediaType ? this._initYoutube() : alert("Error in this._findMedia!")
        },
        _cleanMedia: function () {
            "vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.clean() : "youtube" == this._mediaType && (this._youtubePlayer && this._youtubePlayer.stop(), this.youtubeHolder.css("left", "-10000px"));
            this.mediaPlaying = !1;
            this._mediaType = null
        },
        _setVolume: function (a) {
            "vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.setVolume(a) : "youtube" == this._mediaType && this._youtubePlayer && this._youtubePlayer.setVolume(a)
        },
        _initVimeo: function () {
            var a = this;
            this._vimeoInited ? this._vimeoPlayer.initVideo(this._mediaPath) : (this._vimeoPlayer = d.vimeoPlayer({
                autoPlay: this.vim_autoPlay,
                defaultVolume: this.defaultVolume,
                mediaPath: this._mediaPath,
                vimeoHolder: this.vimeoHolder,
                isMobile: this.isMobile,
                initialAutoplay: this.initialAutoplay
            }), d(this._vimeoPlayer).bind("ap_VimeoPlayer.VIMEO_READY", function () {
                a.mediaPreloader.css("display", "none")
            }), d(this._vimeoPlayer).bind("ap_VimeoPlayer.VIMEO_PLAY", function () {
                a.mediaPreloader.css("display", "none");
                a.mediaPlaying = !0
            }), d(this._vimeoPlayer).bind("ap_VimeoPlayer.VIMEO_PAUSE", function () {
                a.mediaPlaying = !1
            }), d(this._vimeoPlayer).bind("ap_VimeoPlayer.END_PLAY", function () {
                a._autoAdvanceToNextVideo ? a._mediaAdvance() : a.isMobile ? a.initialAutoplay && a._vimeoPlayer.play() : a.vim_autoPlay && a._vimeoPlayer.play()
            }), this._vimeoInited = !0, setTimeout(function () {
                a._resizeElements()
            }, 500))
        },
        _initYoutube: function () {
            var a = this;
            a.youtubeHolder.css("left", "0px");
            this._youtubeInited ? this._youtubePlayer.initVideo(this._mediaPath) : (this._youtubePlayer = d.youtubePlayer({
                autoPlay: this.yt_autoPlay,
                defaultVolume: this.defaultVolume,
                mediaPath: this._mediaPath,
                youtubeHolder: this.youtubeHolder,
                youtubeChromeless: this._youtubeChromeless,
                isMobile: this.isMobile,
                initialAutoplay: this.initialAutoplay,
                quality: this.useYoutubeHighestQuality
            }), d(this._youtubePlayer).bind("ap_YoutubePlayer.YT_READY", function () {
                a.mediaPreloader.css("display", "none")
            }), d(this._youtubePlayer).bind("ap_YoutubePlayer.START_PLAY", function () {
                a.mediaPreloader.css("display", "none");
                a.mediaPlaying = !0
            }), d(this._youtubePlayer).bind("ap_YoutubePlayer.STATE_PLAYING", function () {
                a.mediaPlaying = !0
            }), d(this._youtubePlayer).bind("ap_YoutubePlayer.STATE_PAUSED", function () {
                a.mediaPlaying = !1
            }), d(this._youtubePlayer).bind("ap_YoutubePlayer.END_PLAY", function () {
                a._autoAdvanceToNextVideo ? a._mediaAdvance() : a.isMobile ? a.initialAutoplay && a._youtubePlayer.play() : a.yt_autoPlay && a._youtubePlayer.play()
            }), this._youtubeInited = !0, setTimeout(function () {
                a._resizeElements()
            }, 500))
        },
        _togglePlaylist: function () {
            var a;
            this._playlistOpened ? (this._playlistOpened = !1, a = "horizontal" == this._thumbOrientation ? this.prev_v : this.prev, this.playlist_toggle.css("background-image", 'url("' + a + '")'), "horizontal" == this._thumbOrientation ? (a = this._getComponentSize("h") - this.playlistHitArea, this.mediaWrapper.stop().animate({
                height: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), -1 != this._playlistManager.getCounter() && this.youtubeHolder.stop().animate({
                height: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), this.vimeoHolder.stop().animate({
                height: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), this.thumbHolder.stop().animate({
                bottom: -this.thumbHolderSize + this.playlistHitArea + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            })) : (a = this._getComponentSize("w") - this.playlistHitArea, this.mediaWrapper.stop().animate({
                width: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), -1 != this._playlistManager.getCounter() && this.youtubeHolder.stop().animate({
                width: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), this.vimeoHolder.stop().animate({
                width: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), this.thumbHolder.stop().animate({
                right: -this.thumbHolderSize + this.playlistHitArea + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }))) : (this._playlistOpened = !0, a = "horizontal" == this._thumbOrientation ? this.next_v : this.next, this.playlist_toggle.css("background-image", 'url("' + a + '")'), "horizontal" == this._thumbOrientation ? (a = this._getComponentSize("h") - this.thumbHolderSize, this.mediaWrapper.stop().animate({
                height: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), -1 != this._playlistManager.getCounter() && this.youtubeHolder.stop().animate({
                height: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), this.vimeoHolder.stop().animate({
                height: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), this.thumbHolder.stop().animate({
                bottom: "0px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            })) : (a = this._getComponentSize("w") - this.thumbHolderSize, this.mediaWrapper.stop().animate({
                width: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), -1 != this._playlistManager.getCounter() && this.youtubeHolder.stop().animate({
                width: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), this.vimeoHolder.stop().animate({
                width: a + "px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            }), this.thumbHolder.stop().animate({
                right: "0px"
            }, {
                duration: 500,
                easing: "easeOutQuart"
            })))
        },
        _checkThumbPosition: function () {
            if ("horizontal" == this._thumbOrientation) {
                var a = this._getComponentSize("w"),
                    c;
                this._thumbInnerContainerSize > a - this._thumbBackwardSize - this._thumbForwardSize ? (this.togglePrevBtn("on"), this.toggleNextBtn("on"), this.touchOn = !0, c = parseInt(this.thumbInnerContainer.css("left"), 10), c < a - this._thumbInnerContainerSize - this._thumbForwardSize - this._thumbBackwardSize ? (this._thumbScrollIntervalID && clearInterval(this._thumbScrollIntervalID), c = a - this._thumbInnerContainerSize - this._thumbForwardSize - this._thumbBackwardSize) : 0 < c && (c = 0), this.thumbInnerContainer.css("left", c + "px")) : (this.togglePrevBtn("off"), this.toggleNextBtn("off"), this.touchOn = !1, this.thumbInnerContainer.css("left", a / 2 - this._thumbInnerContainerSize / 2 - this._thumbBackwardSize + "px"))
            } else a = this._getComponentSize("h"), this._thumbInnerContainerSize > a - this._thumbBackwardSize - this._thumbForwardSize ? (this.togglePrevBtn("on"), this.toggleNextBtn("on"), this.touchOn = !0, c = parseInt(this.thumbInnerContainer.css("top"), 10), c < a - this._thumbInnerContainerSize - this._thumbForwardSize - this._thumbBackwardSize ? (this._thumbScrollIntervalID && clearInterval(this._thumbScrollIntervalID), c = a - this._thumbInnerContainerSize - this._thumbForwardSize - this._thumbBackwardSize) : 0 < c && (c = 0), this.thumbInnerContainer.css("top", c + "px")) : (this.togglePrevBtn("off"), this.toggleNextBtn("off"), this.touchOn = !1, this.thumbInnerContainer.css("top", a / 2 - this._thumbInnerContainerSize / 2 - this._thumbBackwardSize + "px"))
        },
        checkScroll: function () {
            if (this.scrollPane) this.scrollPaneApi.reinitialise(), "vertical" == this._thumbOrientation ? (this.scrollPaneApi.scrollToY(0), this.thumbContainer.find(".jspPane").css("left", "0px"), this.scrollPaneApi.getContentHeight() < this.thumbContainer.height() ? this.scrollPaneApi.getContentPane().css("top", parseInt(this.thumbContainer.height() / 2 - this.scrollPaneApi.getContentHeight() / 2, 10) + "px") : this.scrollPaneApi.getContentPane().css("top", "0px")) : (this.scrollPaneApi.scrollToX(0), this.thumbContainer.find(".jspPane").css("top", "0px"), this.scrollPaneApi.getContentWidth() < this.thumbContainer.width() ? this.scrollPaneApi.getContentPane().css("left", parseInt(this.thumbContainer.width() / 2 - this.scrollPaneApi.getContentWidth() / 2, 10) + "px") : this.scrollPaneApi.getContentPane().css("left", "0px"));
            else {
                this.scrollPane = this.thumbContainer;
                this.scrollPane.jScrollPane({
                    horizontalDragMinWidth: 100,
                    horizontalDragMaxWidth: 300,
                    verticalDragMinHeight: 100,
                    verticalDragMaxHeight: 200
                });
                this.scrollPaneApi = this.scrollPane.data("jsp");
                this.scrollPane.bind("jsp-initialised", function (a, d) {});
                var a = this;
                this.isMobile || this.thumbContainer.bind("mousewheel", function (c, d, k, g) {
                    if (!a._componentInited || a._playlistTransitionOn) return !1;
                    "horizontal" == a._thumbOrientation && a.scrollPaneApi && a.scrollPaneApi.scrollByX(100 * (0 < d ? -1 : 1));
                    return !1
                })
            }
        },
        _scrollThumbsBack: function () {
            var a;
            "horizontal" == this._thumbOrientation ? (a = parseInt(this.thumbInnerContainer.css("left"), 10), a += this._thumbsScrollValue, 0 < a && (this._thumbScrollIntervalID && clearInterval(this._thumbScrollIntervalID), a = 0), this.thumbInnerContainer.css("left", a + "px")) : (a = parseInt(this.thumbInnerContainer.css("top"), 10), a += this._thumbsScrollValue, 0 < a && (this._thumbScrollIntervalID && clearInterval(this._thumbScrollIntervalID), a = 0), this.thumbInnerContainer.css("top", a + "px"))
        },
        _scrollThumbsForward: function () {
            if ("horizontal" == this._thumbOrientation) {
                var a = parseInt(this.thumbInnerContainer.css("left"), 10),
                    c = this._getComponentSize("w"),
                    a = a - this._thumbsScrollValue;
                a < c - this._thumbInnerContainerSize - this._thumbForwardSize - this._thumbBackwardSize && (this._thumbScrollIntervalID && clearInterval(this._thumbScrollIntervalID), a = c - this._thumbInnerContainerSize - this._thumbForwardSize - this._thumbBackwardSize);
                this.thumbInnerContainer.css("left", a + "px")
            } else a = parseInt(this.thumbInnerContainer.css("top"), 10), c = this._getComponentSize("h"), a -= this._thumbsScrollValue, a < c - this._thumbInnerContainerSize - this._thumbForwardSize - this._thumbBackwardSize && (this._thumbScrollIntervalID && clearInterval(this._thumbScrollIntervalID), a = c - this._thumbInnerContainerSize - this._thumbForwardSize - this._thumbBackwardSize), this.thumbInnerContainer.css("top", a + "px")
        },
        togglePrevBtn: function (a) {
            "on" == a ? this.thumbBackward.css("display", "block") : this.thumbBackward.css("display", "none")
        },
        toggleNextBtn: function (a) {
            "on" == a ? this.thumbForward.css("display", "block") : this.thumbForward.css("display", "none")
        },
        _disableActiveItem: function () {
            var a = d(this._thumbHolderArr[this._playlistManager.getCounter()]);
            if (a) {
                a.css("cursor", "default");
                var c = a.find("div[data-title='titleDiv']");
                c && (a = a.height() - c.outerHeight(), 0 > a && (a = 0), c.stop().animate({
                    top: a + "px"
                }, {
                    duration: 500,
                    easing: "easeOutQuart"
                }))
            }
        },
        _enableActiveItem: function () {
            if (-1 != this._playlistManager.getCounter()) {
                var a = d(this._thumbHolderArr[this._playlistManager.getCounter()]);
                if (a) {
                    a.css("cursor", "pointer");
                    var c = a.find("div[data-title='titleDiv']");
                    c && c.stop().animate({
                        top: a.height() + "px"
                    }, {
                        duration: 500,
                        easing: "easeOutQuart"
                    })
                }
            }
        },
        _makeThumbHolder: function () {
            var a, c = this._getComponentSize("w"),
                f = this._getComponentSize("h");
            this.thumbHolder && (this._thumbInnerContainerSize = 0, this.thumbContainer.css({
                width: "",
                height: ""
            }), this.thumbInnerContainer.css({
                width: "",
                height: ""
            }));
            if ("horizontal" == this._thumbOrientation) {
                if (this.thumbHolder ? (this.thumbHolder.removeClass().addClass("thumbHolder"), this.playlistControls.removeClass().addClass("playlistControls"), this.playlistHitArea = this.playlistControls.height(), this.thumbHolderSize = this.thumbHolder.height(), "buttons" == this.scrollType && (this.thumbBackward.removeClass().addClass("thumbBackward"), this.thumbForward.removeClass().addClass("thumbForward"), this._thumbBackwardSize = parseInt(this.thumbBackward.css("width"), 10), this._thumbForwardSize = parseInt(this.thumbForward.css("width"), 10))) : this.playlistHitArea = this.thumbHolderSize = 0, this._playlistOpened ? (a = f - this.thumbHolderSize, this.thumbHolder && this.thumbHolder.css("bottom", "0px")) : (a = f - this.playlistHitArea, this.thumbHolder && this.thumbHolder.css("bottom", -this.thumbHolderSize + this.playlistHitArea + "px")), this.mediaWrapper.removeClass().addClass("mediaWrapper").css({
                    width: "100%",
                    height: a + "px"
                }), this.vimeoHolder.css({
                    width: "100%",
                    height: a + "px"
                }), this._mediaType && "youtube" == this._mediaType && -1 != this._playlistManager.getCounter() && this.youtubeHolder.css({
                    height: a + "px",
                    width: c + "px"
                }), this.thumbHolder) {
                    "buttons" == this.scrollType ? this.thumbContainer.removeClass().addClass("thumbContainer").css({
                        width: c - this._thumbBackwardSize - this._thumbForwardSize + "px",
                        left: this._thumbBackwardSize + "px",
                        top: ""
                    }) : this.thumbContainer.removeClass().addClass("thumbContainer").css("width", c + "px");
                    this.thumbInnerContainer.removeClass().addClass("thumbInnerContainer").css({
                        top: "0px",
                        left: "0px"
                    });
                    this.playlist_prev.removeClass().addClass("playlist_prev");
                    this.playlist_toggle.removeClass().addClass("playlist_toggle");
                    this.playlist_next.removeClass().addClass("playlist_next");
                    250 < c ? (this.advance_controls.removeClass().addClass("advance_controls"), this.playlist_switch.removeClass().addClass("playlist_switch")) : (this.advance_controls.removeClass().addClass("advance_controls_small"), this.playlist_switch.removeClass().addClass("playlist_switch_small"));
                    a = 0;
                    c = this._thumbHolderArr.length;
                    this._thumbInnerContainerSize = 0;
                    d(this._thumbHolderArr[c - 1]).css({
                        marginRight: "0px"
                    });
                    for (a; a < c; a++) f = d(this._thumbHolderArr[a]).removeClass().addClass("thumbs"), f.find("div[data-title='titleDiv']").css({
                        top: f.height() + "px",
                        display: "block"
                    }), this._thumbInnerContainerSize += f.outerWidth(!0);
                    this.thumbInnerContainer.css("width", this._thumbInnerContainerSize + "px")
                }
            } else if (this.thumbHolder ? (this.thumbHolder.removeClass().addClass("thumbHolder_v"), this.playlistControls.removeClass().addClass("playlistControls_v"), this.playlistHitArea = this.playlistControls.width(), this.thumbHolderSize = this.thumbHolder.width(), "buttons" == this.scrollType && (this.thumbBackward.removeClass().addClass("thumbBackward_v"), this.thumbForward.removeClass().addClass("thumbForward_v"), this._thumbBackwardSize = parseInt(this.thumbBackward.css("height"), 10), this._thumbForwardSize = parseInt(this.thumbForward.css("height"), 10))) : this.playlistHitArea = this.thumbHolderSize = 0, this._playlistOpened ? (a = c - this.thumbHolderSize, this.thumbHolder && this.thumbHolder.css("right", "0px")) : (a = c - this.playlistHitArea, this.thumbHolder && this.thumbHolder.css("right", -this.thumbHolderSize + this.playlistHitArea + "px")), this.mediaWrapper.removeClass().addClass("mediaWrapper_v").css({
                width: a + "px",
                height: "100%"
            }), this.vimeoHolder.css({
                width: a + "px",
                height: "100%"
            }), this._mediaType && "youtube" == this._mediaType && -1 != this._playlistManager.getCounter() && this.youtubeHolder.css({
                width: a + "px",
                height: f + "px"
            }), this.thumbHolder)
                for ("buttons" == this.scrollType ? this.thumbContainer.removeClass().addClass("thumbContainer_v").css({
                    height: f - this._thumbBackwardSize - this._thumbForwardSize + "px",
                    top: this._thumbBackwardSize + "px",
                    left: ""
                }) : this.thumbContainer.removeClass().addClass("thumbContainer_v").css({
                    height: f + "px"
                }), this.thumbInnerContainer.removeClass().addClass("thumbInnerContainer_v").css({
                    top: "0px",
                    left: "0px"
                }), this.playlist_prev.removeClass().addClass("playlist_prev_v"), this.playlist_toggle.removeClass().addClass("playlist_toggle_v"), this.playlist_next.removeClass().addClass("playlist_next_v"), 250 < f ? (this.advance_controls.removeClass().addClass("advance_controls_v"), this.playlist_switch.removeClass().addClass("playlist_switch_v")) : (this.advance_controls.removeClass().addClass("advance_controls_v_small"), this.playlist_switch.removeClass().addClass("playlist_switch_v_small")), a = 0, c = this._thumbHolderArr.length, this._thumbInnerContainerSize = 0, d(this._thumbHolderArr[c - 1]).css({
                    marginBottom: "0px"
                }), a; a < c; a++) f = d(this._thumbHolderArr[a]).removeClass().addClass("thumbs_v"), f.find("div[data-title='titleDiv']").css({
                    top: f.height() + "px",
                    display: "block"
                }), this._thumbInnerContainerSize += f.outerHeight(!0);
            this.thumbHolder && (this._disableActiveItem(), a = "horizontal" == this._thumbOrientation ? this.prev : this.prev_v, this.playlist_prev.css("background-image", 'url("' + a + '")'), a = this._playlistOpened ? "horizontal" == this._thumbOrientation ? this.next_v : this.next : "horizontal" == this._thumbOrientation ? this.prev_v : this.prev, this.playlist_toggle.css("background-image", 'url("' + a + '")'), a = "horizontal" == this._thumbOrientation ? this.next : this.next_v, this.playlist_next.css("background-image", 'url("' + a + '")'), "buttons" == this.scrollType && (a = "horizontal" == this._thumbOrientation ? this.next : this.next_v, this.thumbForward.css("background-image", 'url("' + a + '")'), a = "horizontal" == this._thumbOrientation ? this.prev : this.prev_v, this.thumbBackward.css("background-image", 'url("' + a + '")')))
        },
        _resizeElements: function () {
            var a, c = this._getComponentSize("w"),
                d = this._getComponentSize("h");
            "horizontal" == this._thumbOrientation ? (this.thumbHolder ? ("buttons" == this.scrollType && (this._thumbBackwardSize = parseInt(this.thumbBackward.css("width"), 10), this._thumbForwardSize = parseInt(this.thumbForward.css("width"), 10)), this.playlistHitArea = this.playlistControls.height(), this.thumbHolderSize = this.thumbHolder.height()) : this.playlistHitArea = this.thumbHolderSize = 0, this._playlistOpened ? (a = d - this.thumbHolderSize, this.thumbHolder && this.thumbHolder.css("bottom", "0px")) : (a = d - this.playlistHitArea, this.thumbHolder && this.thumbHolder.css("bottom", -this.thumbHolderSize + this.playlistHitArea + "px")), this.mediaWrapper.css("height", a + "px"), this.vimeoHolder.css("height", a + "px"), this._mediaType && "youtube" == this._mediaType && -1 != this._playlistManager.getCounter() && this.youtubeHolder.css({
                height: a + "px",
                width: c + "px"
            }), this.thumbHolder && ("buttons" == this.scrollType ? this.thumbContainer.css("width", c - this._thumbBackwardSize - this._thumbForwardSize + "px") : this.thumbContainer.css("width", c + "px"), this.playlist_prev.removeClass().addClass("playlist_prev"), this.playlist_toggle.removeClass().addClass("playlist_toggle"), this.playlist_next.removeClass().addClass("playlist_next"), 250 < c ? (this.advance_controls.removeClass().addClass("advance_controls"), this.playlist_switch.removeClass().addClass("playlist_switch")) : (this.advance_controls.removeClass().addClass("advance_controls_small"), this.playlist_switch.removeClass().addClass("playlist_switch_small")))) : (this.thumbHolder ? ("buttons" == this.scrollType && (this._thumbBackwardSize = parseInt(this.thumbBackward.css("height"), 10), this._thumbForwardSize = parseInt(this.thumbForward.css("height"), 10)), this.playlistHitArea = this.playlistControls.width(), this.thumbHolderSize = this.thumbHolder.width()) : this.playlistHitArea = this.thumbHolderSize = 0, this._playlistOpened ? (a = c - this.thumbHolderSize, this.thumbHolder && this.thumbHolder.css("right", "0px")) : (a = c - this.playlistHitArea, this.thumbHolder && this.thumbHolder.css("right", -this.thumbHolderSize + this.playlistHitArea + "px")), this.mediaWrapper.css("width", a + "px"), this.vimeoHolder.css("width", a + "px"), this._mediaType && "youtube" == this._mediaType && -1 != this._playlistManager.getCounter() && this.youtubeHolder.css({
                width: a + "px",
                height: d + "px"
            }), this.thumbHolder && ("buttons" == this.scrollType ? this.thumbContainer.css("height", d - this._thumbBackwardSize - this._thumbForwardSize + "px") : this.thumbContainer.css("height", d + "px"), this.playlist_prev.removeClass().addClass("playlist_prev_v"), this.playlist_toggle.removeClass().addClass("playlist_toggle_v"), this.playlist_next.removeClass().addClass("playlist_next_v"), 250 < d ? (this.advance_controls.removeClass().addClass("advance_controls_v"), this.playlist_switch.removeClass().addClass("playlist_switch_v")) : (this.advance_controls.removeClass().addClass("advance_controls_v_small"), this.playlist_switch.removeClass().addClass("playlist_switch_v_small"))))
        },
        _switchLayout: function () {
            this._getComponentSize("h");
            this._getComponentSize("w");
            this._thumbOrientation = "horizontal" == this._thumbOrientation ? "vertical" : "horizontal";
            this._makeThumbHolder();
            this.thumbHolder && ("buttons" == this.scrollType ? this._checkThumbPosition() : this.checkScroll())
        },
        _doneResizing: function (a) {
            this._getComponentSize("h");
            this._getComponentSize("w");
            a ? this._makeThumbHolder() : this._resizeElements();
            this.thumbHolder && ("buttons" == this.scrollType ? this._checkThumbPosition() : this.checkScroll())
        },
        _getComponentSize: function (a) {
            return "w" == a ? this.componentWrapper.width() : this.componentWrapper.height()
        },
        checkKey: function () {
            this.value = this.value.replace(/[^0-9]/g, "")
        },
        isNumber: function (a) {
            return !isNaN(parseFloat(a)) && isFinite(a)
        },
        toggleOption: function (a, c) {
            c ? a.parent().is("span") && a.unwrap().show() : a.parent().is("span") || a.wrap("<span>").hide()
        },
        _preventSelect: function (a) {
            d(a).each(function () {
                d(this).attr("unselectable", "on").css({
                    "-moz-user-select": "none",
                    "-webkit-user-select": "none",
                    "user-select": "none"
                }).each(function () {
                    this.onselectstart = function () {
                        return !1
                    }
                })
            })
        }
    };
    d.fn.videoGallery = function (a) {
        return this.each(function () {
            d.fn.videoGallery.playMedia = function () {
                c.playMedia()
            };
            d.fn.videoGallery.pauseMedia = function () {
                c.pauseMedia()
            };
            d.fn.videoGallery.toggleMedia = function () {
                c.toggleMedia()
            };
            d.fn.videoGallery.nextMedia = function () {
                c.nextMedia()
            };
            d.fn.videoGallery.previousMedia = function () {
                c.previousMedia()
            };
            d.fn.videoGallery.loadMedia = function (a) {
                c.loadMedia(a)
            };
            d.fn.videoGallery.destroyMedia = function () {
                c.destroyMedia()
            };
            d.fn.videoGallery.destroyPlaylist = function () {
                c.destroyPlaylist()
            };
            d.fn.videoGallery.togglePlaylist = function () {
                c.togglePlaylist()
            };
            d.fn.videoGallery.switchLayout = function () {
                c.switchLayout()
            };
            d.fn.videoGallery.setVolume = function (a) {
                c.setVolume(a)
            };
            d.fn.videoGallery.getDescription = function (a) {
                return c.getDescription(a)
            };
            d.fn.videoGallery.getPlaylistData = function () {
                c.getPlaylistData()
            };
            d.fn.videoGallery.getIsMobile = function () {
                return c.getIsMobile()
            };
            var c = new q(d(this), a);
            d(this).data("videoGallery", c)
        })
    };
    d.fn.videoGallery.defaults = {
        defaultVolume: 0.5,
        autoPlay: !1,
        loopingOn: !0,
        randomPlay: !1,
        autoAdvanceToNextVideo: !0,
        autoOpenPlaylist: !0,
        closePlaylistOnVideoSelect: !1,
        videoGallerySetupDone: function () {}
    };
    d.fn.videoGallery.settings = {}
})(jQuery);